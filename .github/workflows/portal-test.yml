name: Multi-Cloud Terraform Deployment

on:
  workflow_dispatch:
    inputs:
      cloudProvider:
        description: "Cloud provider (aws, azure, gcp, oracle)"
        required: true
        type: string
      varsTemplateParams:
        description: "vars.tf template folder path"
        required: true
        type: string
        default: "./cloud/modules/cloud/vars.tf"
      serviceName:
        description: "Name of service (e.g., storage-accounts, key-vaults)"
        required: true
        type: string
      # memberName:
      #   description: "Username for PR review"
      #   required: true
      #   type: string
      reason:
        description: 'Reason for deployment'
        required: true
      # cloud_instance:
      #   description: 'Cloud instance name'
      #   required: true
      # group:
        description: 'ServiceNow group'
      # cost_center:
      #   description: 'Cost center for the deployment'
      network_id:
        description: 'Network identifier'
      # vault:
      #   description: 'Vault name or identifier'
      product_id:
        description: 'Product identifier'
        required: true
      environment:
        description: 'Target environment (dev, qa, stg, prod)'
        required: true

env:
  TF_VAR_cloud_provider: ${{ github.event.inputs.cloudProvider }}
  TF_VAR_environment: ${{ github.event.inputs.environment }}
  newBranchName: 'deploy-${{ github.event.inputs.cloudProvider }}-${{ github.event.inputs.serviceName }}-${{ github.run_id }}'
  TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      repo_name: ${{ steps.set_repo_name.outputs.repo_name }}
    steps:
      - name: Set Repo Name
        id: set_repo_name
        run: |
          echo "repo_name=tf_${{ github.event.inputs.cloudProvider }}_portal" >> $GITHUB_ENV

  # Additional jobs for repository creation and Terraform setup would go here

  prepare_and_plan:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          repository: ${{ needs.setup.outputs.repo_name }}
          ref: main

      - name: Create branch for Terraform plan
        run: |
          git checkout -b ${{ env.newBranchName }}
          git push origin ${{ env.newBranchName }}

      - name: Update vars.tf File
        run: |
          VARS_PATH="${{ github.event.inputs.varsTemplateParams }}"
          ENVIRONMENT="${{ github.event.inputs.environment }}"
          CLOUD_INSTANCE="${{ github.event.inputs.cloud_instance }}"
          NETWORK_ID="${{ github.event.inputs.network_id }}"

          # Update vars.tf with input variables or secrets
          sed -i 's/\${cloud_instance}/'"$CLOUD_INSTANCE"'/g' vars.tf
          sed -i 's/\${network_id}/'"$NETWORK_ID"'/g' vars.tf
          sed -i "s/variable \"environment\" { default = \".*\" }/variable \"environment\" { default = \"$ENVIRONMENT\" }/" "$VARS_PATH"

      
  create_pr:
    needs: prepare_and_plan
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.environment != 'prod' }} # Only for non-prod environments
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ env.newBranchName }}

      - name: Open Pull Request
        id: create_pull_request
        uses: ./.github/actions/create-pull-request
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          pr_title: "Deploy ${{ github.event.inputs.serviceName }} to ${{ github.event.inputs.environment }}"
          pr_body: |
            **Deployment Details**:
            - **Product ID**: ${{ github.event.inputs.product_id }}
            - **Target Environment**: ${{ github.event.inputs.environment }}
            - **Cloud Instance Name**: ${{ github.event.inputs.cloud_instance }}
            - **Group**: ${{ github.event.inputs.group }}
            - **Reason for Deployment**: ${{ github.event.inputs.reason }}
            - **Cost Center**: ${{ github.event.inputs.cost_center }}
            - **Network ID**: ${{ github.event.inputs.network_id }}
            - **Vault**: ${{ github.event.inputs.vault }}
            <!-- Terraform Plan Output will be inserted here by additional steps if necessary -->
          team_reviewers: "TeamA"
          head_branch: ${{ env.newBranchName }}
          base_branch: "main"
        

  # Additional add serive now ticket, send notification to teams, and apply Terraform would go here
# ... (previous content)

  apply_terraform:
    needs: create_pr
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.environment != 'prod' }} # Only for non-prod environments
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ env.newBranchName }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -auto-approve
        env:
          TF_VAR_cloud_instance: ${{ github.event.inputs.cloud_instance }}
          TF_VAR_network_id: ${{ github.event.inputs.network_id }}
          # Add additional required TF_VAR_* environment variables here

  update_servicenow:
    needs: apply_terraform
    runs-on: ubuntu-latest
    steps:
      - name: Notify ServiceNow on Deployment Success
        uses: ./.github/actions/update-servicenow # This is the path to your custom action
        with:
          instance: 'your_instance'
          username: ${{ secrets.SERVICENOW_USERNAME }}
          password: ${{ secrets.SERVICENOW_PASSWORD }}
          appSysID: 'your_app_sys_id'
          updateSetSysID: 'your_update_set_sys_id'
          
          # Add other parameters as per ServiceNow Action documentation

  # ... (any additional steps or jobs)

